#!/usr/local/bin/node
/* eslint-env node */

/**
 * Creates the labelService.js file from the Custom Labels metadata file
 * 
 * Reads in the CustomLabels Metadata file, parses the XML, and generates the LabelService LWC file
 * 
 * Does not alphabetize - uses the order present in the CustomLabels file
 * 
 * Does not follow camelCase designation for the variable names but that's okay
 * 
 * Usage: run from project root directory:
 *     node ./dx-utils/createLabelService.js
 * 
 * Add command line parameters for input and output:
 *     --input (-i) CustomLabels XML File location
 *     --output (-o) LabelService LWC JS File location
 * 
 * Use the --categorize (-c) command line parameter to categorize labels inside the LWC object
 * Example without Categorize:
 * const labels = {
 *     AdminAuthenticated,
 *     AdminUnauthenticated,
 *     UserName
 * };
 * Example with Categorize:
 * const labels = {
 *     Admin: {
 *         AdminAuthenticated,
 *         AdminUnauthenticated
 *     },
 *     User: {
 *         UserName
 *     }
 * };
 * 
 * @author Bobby Tamburrino
 */

const fs = require('fs');
const commander = require('commander');
const parser = require('xml-js');

const DEFAULT_INPUT = 'force-app/main/default/labels/CustomLabels.labels-meta.xml';
const DEFAULT_OUTPUT = 'force-app/main/default/lwc/labelService/labelService.js';

// Command line argument processing
commander
	.option('-i, --input <file>', 'CustomLabels path')
	.option('-o, --output <file>', 'labelService LWC JS path')
	.option('-c, --categoirize', 'Categorize labels in the LWC object');
commander.parse();
const options = commander.opts();

const inputFile = options.input ? options.input : DEFAULT_INPUT;
const outputFile = options.output ? options.output : DEFAULT_OUTPUT;
const categoirize = options.categoirize ? options.categoirize : false;
const currentTime = new Date().toLocaleString();

const exampleLabel = categoirize ? 'label.Admin.AdminAuthenticated' : 'label.AdminAuthenticated';

const codeHeader = `/**
 * To use in your component:
 *
 * yourComponent.js:
 * import labels from 'c/labelService';
 *
 * export default class YourComponent extends LightningElement {
 *     label = labels;
 *
 *     console.log(this.${exampleLabel});
 * }
 *
 * yourComponent.html:
 * <button label={${exampleLabel}} />
 *
 * WATCH OUT: If you are updating this service AND CustomLabels.labels-meta.xml in the same SFDX transaction, IT WILL FAIL.
 * The Custom Labels must exist BEFORE the LWC transaction takes place, or the entire push will fail.
 * To combat this, run this first:
 *     sfdx force:source:deploy -p ${inputFile}
 * THEN:
 *     sfdx force:source:push
 *
 * A good way around this is to have the CustomLabels in an earlier directory in your sfdx-project.json, that way it deploys first
 * And then have this labelService LWC in a later direcotry so it deploys later
 *
 * Service class generated by dx-utils/createLabelService.js at ${currentTime} from ${inputFile}
 */
`;

const codeFooter = `
};

export default labels;
`;

fs.readFile(inputFile, (error, data) => {
	if (error) {
		console.log(error);
		process.exit(1);
	}

	const labelJSON = JSON.parse(parser.xml2json(data, {
		compact: true,
		spaces: 4
	}));
	let labelMap = new Map();

	labelJSON.CustomLabels.labels.forEach((label) => {
		let category = [];
		if (labelMap.has(label.categories._text)) {
			category = labelMap.get(label.categories._text);
		}
		category.push(label.fullName._text);
		labelMap.set(label.categories._text, category);
	});

	let importBlock = '';
	let codeBlock = '\nconst labels = {\n';

	labelMap.forEach((value, key) => {
		importBlock += `\n// ${key}\n`;
		let variables = '';
		if (categoirize) {
			const keyNoSpaces = key.replace(/ /g, '');
			codeBlock += `    ${keyNoSpaces}: {\n`;
		}
		value.forEach(str => {
			const variableName = str.replace(/_/g, '');
			importBlock += `import ${variableName} from '@salesforce/label/c.${str}';\n`;
			if (categoirize) {
				variables += '    ';
			}
			variables += `    ${variableName},\n`;
		})
		codeBlock += categoirize ? variables.slice(0, -2) + '\n    },\n' : variables;
	});

	// The slice command removes the last comma from the code block (-2 because there's a newline too)
	const fileContents = codeHeader + importBlock + codeBlock.slice(0, -2) + codeFooter;

	fs.writeFile(outputFile, fileContents, (err) => {
		if (err) {
			console.log(err);
			process.exit(1);
		} else {
			console.log(`File output to ${outputFile}`);
		}
	});
});
